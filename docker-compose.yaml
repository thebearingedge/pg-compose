services:

  database:
    image: docker.io/postgres:15.2-alpine
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U app -d app || exit 1 # exit 0 or 1 explicitly
      interval: 5s
      start_period: 5s # give database 5 seconds before healthcheck matters

  admin:
    image: docker.io/sosedoff/pgweb:0.14.0
    environment:
      PGWEB_DATABASE_URL: postgres://app:app@database/app?sslmode=disable
    ports:
      - 8081:8081
    depends_on:
      database:
        condition: service_healthy

  pool:
    image: docker.io/bitnami/pgbouncer:1.18.0
    environment:
      POSTGRESQL_HOST: database
      POSTGRESQL_USERNAME: app
      POSTGRESQL_PASSWORD: app
      POSTGRESQL_DATABASE: app
      PGBOUNCER_DATABASE: app # expose backend database as `app`
    depends_on:
      database:
        condition: service_healthy

  client:
    image: docker.io/postgres:15.2-alpine
    environment:
      DATABASE_URL: postgres://app:app@pool:6432/app # connect to pgbouncer
    depends_on:
      - pool
    command:
      - /bin/sh
      - -c
      - "trap : TERM INT; sleep infinity & wait" # handle interrupts

volumes:
  pg_data:

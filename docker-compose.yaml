services:

  database:
    image: docker.io/postgres:15.2-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      # exit 0 or 1 explicitly
      test: pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1
      interval: 5s
      start_period: 5s # give initdb 5 seconds before healthcheck matters

  admin:
    image: docker.io/sosedoff/pgweb:0.14.0
    environment:
      PGWEB_DATABASE_URL: ${PGWEB_DATABASE_URL}
    ports:
      - 8081:8081
    depends_on:
      database:
        condition: service_healthy

  pool:
    image: docker.io/bitnami/pgbouncer:1.18.0
    environment:
      POSTGRESQL_HOST: database
      POSTGRESQL_USERNAME: ${POSTGRES_USER}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRES_DB}
      PGBOUNCER_DATABASE: app # expose backend database as `app`
    depends_on:
      database:
        condition: service_healthy

  client:
    image: docker.io/postgres:15.2-alpine
    environment:
      # connect to pgbouncer
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pool:6432/app
    depends_on:
      - pool
    command:
      - /bin/sh
      - -c
      - "trap : TERM INT; sleep infinity & wait" # handle interrupts

volumes:
  pg_data:
